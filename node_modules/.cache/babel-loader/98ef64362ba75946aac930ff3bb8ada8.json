{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n  const [componentMounted, setComponentMounted] = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setMode('dark');\n      document.getElementById('dark-theme');\n    } else {\n      setMode('light');\n      document.getElementById('light-theme');\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches && !localTheme ? setMode('dark') : localTheme ? setTheme(localTheme) : setMode('light');\n    setComponentMounted(true);\n  }, []);\n  return [theme, toggleTheme, componentMounted];\n};\n\n_s(useDarkMode, \"5Y28hpxLmrdWNPGd/5oHnPNY6R4=\");","map":{"version":3,"sources":["/home/roqa/Documents/git/google-front/src/components/Theme/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","toggleTheme","document","getElementById","localTheme","getItem","matchMedia","matches"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,KAAD,CAAxD;;AACA,QAAMM,OAAO,GAAGC,IAAI,IAAI;AACtBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,WAAW,GAAG,MAAM;AACxB,QAAIT,KAAK,KAAK,OAAd,EAAuB;AACrBI,MAAAA,OAAO,CAAC,MAAD,CAAP;AACAM,MAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB;AACD,KAHD,MAGO;AACLP,MAAAA,OAAO,CAAC,OAAD,CAAP;AACAM,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB;AACD;AACF,GARD;;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,UAAU,GAAGN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,OAA5B,CAAnB;AACAP,IAAAA,MAAM,CAACQ,UAAP,IAAqBR,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,EAAkDC,OAAvE,IAAkF,CAACH,UAAnF,GACER,OAAO,CAAC,MAAD,CADT,GAEEQ,UAAU,GACRX,QAAQ,CAACW,UAAD,CADA,GAERR,OAAO,CAAC,OAAD,CAJX;AAKAD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,CAACH,KAAD,EAAQS,WAAR,EAAqBP,gBAArB,CAAP;AACD,CA7BM;;GAAMH,W","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n  const [componentMounted, setComponentMounted] = useState(false);\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode)\n    setTheme(mode)\n  };\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setMode('dark')\n      document.getElementById('dark-theme');\n    } else {\n      setMode('light')\n      document.getElementById('light-theme');\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches && !localTheme ?\n      setMode('dark') :\n      localTheme ?\n        setTheme(localTheme) :\n        setMode('light');\n    setComponentMounted(true);\n  }, []);\n\n  return [theme, toggleTheme, componentMounted]\n};"]},"metadata":{},"sourceType":"module"}