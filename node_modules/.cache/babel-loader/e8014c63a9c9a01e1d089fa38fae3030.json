{"ast":null,"code":"var _jsxFileName = \"/home/roqa/Documents/Git/Google/src/pages/MyAccount/Password/index.jsx\",\n    _s = $RefreshSig$();\n\nimport AccountHeader from \"../Header\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { SubHeading } from \"../Home\";\nimport { useState, useContext } from 'react';\nimport { UserContext } from \"../../../usercontext\";\nimport { Helmet } from \"react-helmet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Password() {\n  _s();\n\n  var _errors$password, _errors$password2, _errors$password3, _errors$passwordConfi, _errors$passwordConfi2, _errors$passwordConfi3;\n\n  const {\n    setUser\n  } = useContext(UserContext);\n  const obj = JSON.parse(localStorage.getItem('user'));\n  const email = obj[0].email;\n  const password = obj[0].password;\n  const URL = \"http://localhost:5000/users?email=\" + email;\n  const [value, setValue] = useState({\n    password: password\n  });\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      password: value.password\n    },\n    mode: 'onSubmit',\n    reValidateMode: 'onChange',\n    delayError: 1000\n  });\n\n  const currentUser = async () => {\n    let response = await axios.get(URL);\n    return response.data;\n  };\n\n  const onSubmit = async () => {\n    try {\n      await axios({\n        method: \"put\",\n        url: URL,\n        data: {\n          password: value.password\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      setTimeout(function () {\n        window.location.href = \"http://localhost:3000/myaccount/personalinfo/\";\n      }, 250);\n    } catch (error) {\n      console.log(error.response.data);\n    }\n\n    const user = await currentUser();\n    setUser(user);\n  };\n\n  const handleChange = e => {\n    setValue({ ...value,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const validPasswordRegex = /^(?=.*?[A-Z,a-z]).{8,}$/;\n  const emptyStringRegex = /^(?![\\s\\S])/; // '' //\n\n  const noSpaceStartOrEndRegex = /^[^\\s].+[^\\s]$/;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubHeading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"account-flex-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-flex-sect\",\n        children: [\"Choose a strong password and don't reuse it for other accounts.\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"learn-more\",\n          children: \"Learn more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-flex-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\", {\n                required: true,\n                minLength: 8,\n                validate: {\n                  emptyString: value => emptyStringRegex.test(value) ? false : true,\n                  // ' ' //\n                  noSpaceStartOrEnd: value => noSpaceStartOrEndRegex.test(value) ? true : false,\n                  validPassword: value => validPasswordRegex.test(value) ? true : false\n                }\n              }),\n              autoComplete: \"off\",\n              name: \"password\",\n              id: \"password\",\n              type: \"password\",\n              onChange: handleChange,\n              className: ((_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.type) === \"minLength\" || ((_errors$password2 = errors.password) === null || _errors$password2 === void 0 ? void 0 : _errors$password2.type) === \"required\" || ((_errors$password3 = errors.password) === null || _errors$password3 === void 0 ? void 0 : _errors$password3.type) === \"noSpaceStartOrEnd\" ? \"signup-input-error\" : \"signup-input\",\n              \"aria-invalid\": errors.password ? \"true\" : \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"signup-input-placeholder\",\n              children: \"New password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Use at least 8 characters. Don\\u2019t use a password from another site, or something too obvious like your pet\\u2019s name. \\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Why?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"passwordConfirm\", {\n                required: true,\n                minLength: 8,\n                validate: {\n                  emptyString: value => emptyStringRegex.test(value) ? false : true,\n                  // ' ' //\n                  passwordConfirm: value => value === watch('password') ? true : false,\n                  validPassword: value => validPasswordRegex.test(value) ? true : false\n                }\n              }),\n              autoComplete: \"off\",\n              name: \"passwordConfirm\",\n              id: \"passwordConfirm\",\n              type: \"password\",\n              className: errors.password && (((_errors$passwordConfi = errors.passwordConfirm) === null || _errors$passwordConfi === void 0 ? void 0 : _errors$passwordConfi.type) === \"minLength\" || ((_errors$passwordConfi2 = errors.passwordConfirm) === null || _errors$passwordConfi2 === void 0 ? void 0 : _errors$passwordConfi2.type) === \"required\" || ((_errors$passwordConfi3 = errors.passwordConfirm) === null || _errors$passwordConfi3 === void 0 ? void 0 : _errors$passwordConfi3.type) !== \"passwordConfirm\") ? \"signup-input-error\" : \"signup-input\",\n              \"aria-invalid\": errors.passwordConfirm ? \"true\" : \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"signup-input-placeholder\",\n              children: \"Confirm new password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Change password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Password, \"N5RgpLhBAAZ8WZbN2mXLRWVKQuQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["/home/roqa/Documents/Git/Google/src/pages/MyAccount/Password/index.jsx"],"names":["AccountHeader","axios","Link","useForm","SubHeading","useState","useContext","UserContext","Helmet","Password","setUser","obj","JSON","parse","localStorage","getItem","email","password","URL","value","setValue","register","handleSubmit","watch","formState","errors","defaultValues","mode","reValidateMode","delayError","currentUser","response","get","data","onSubmit","method","url","headers","setTimeout","window","location","href","error","console","log","user","handleChange","e","target","name","validPasswordRegex","emptyStringRegex","noSpaceStartOrEndRegex","required","minLength","validate","emptyString","test","noSpaceStartOrEnd","validPassword","type","passwordConfirm"],"mappings":"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","sourcesContent":["import AccountHeader from \"../Header\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { SubHeading } from \"../Home\";\nimport { useState, useContext } from 'react';\nimport { UserContext } from \"../../../usercontext\";\nimport { Helmet } from \"react-helmet\";\n\nexport default function Password() {\n  const { setUser } = useContext(UserContext);\n\n  const obj = JSON.parse(localStorage.getItem('user'));\n  const email = obj[0].email;\n  const password = obj[0].password;\n  const URL = \"http://localhost:5000/users?email=\" + email;\n\n  const [value, setValue] = useState({\n    password: password\n  })\n\n  const {register, handleSubmit, watch, formState: { errors }} = useForm({\n    defaultValues: {\n      password: value.password\n    },\n    mode: 'onSubmit',\n    reValidateMode: 'onChange',\n    delayError: 1000,\n  });\n\n  const currentUser = async () => {\n    let response = await axios.get(URL);\n    return response.data;\n  };\n\n  const onSubmit = async() => {\n    try {\n      await axios({\n        method: \"put\",\n        url: URL,\n        data: {\n          password: value.password\n        },\n        headers: { \"Content-Type\": \"application/json\"},\n      });\n      setTimeout(function () {\n        window.location.href = \"http://localhost:3000/myaccount/personalinfo/\";\n      }, 250);\n    } catch(error) {\n      console.log(error.response.data)\n    }\n    const user = await currentUser();\n      setUser(user);\n  }\n\n  const handleChange = (e) => {\n    setValue({\n      ...value,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  const validPasswordRegex =  /^(?=.*?[A-Z,a-z]).{8,}$/;\n  const emptyStringRegex = /^(?![\\s\\S])/; // '' //\n  const noSpaceStartOrEndRegex = /^[^\\s].+[^\\s]$/;\n\n  return (\n    <>\n      <Helmet>\n        <title>Password</title>\n      </Helmet>\n      <AccountHeader />\n      <SubHeading />\n      <section className=\"account-flex-2\">\n        <div className=\"account-flex-sect\">\n        Choose a strong password and don't reuse it for other accounts.&nbsp;\n          <a className=\"learn-more\">\n            Learn more\n          </a>\n        </div>\n        <div className=\"account-flex-form\">\n    <form onSubmit={handleSubmit} noValidate>\n    <div className=\"input-container\">\n          <input \n            {...register(\"password\", {\n              required: true,\n              minLength: 8,\n              validate: {\n                emptyString: (value) => emptyStringRegex.test(value) ? false : true, // ' ' //\n                noSpaceStartOrEnd: (value) => noSpaceStartOrEndRegex.test(value) ? true : false,\n                validPassword: (value) => validPasswordRegex.test(value) ? true : false\n              }\n            })}\n            autoComplete=\"off\"\n            name=\"password\"\n            id=\"password\"\n            type=\"password\"\n\n            onChange={handleChange}\n            className={(\n              errors.password?.type === \"minLength\" ||\n              errors.password?.type === \"required\" ||\n              errors.password?.type === \"noSpaceStartOrEnd\")\n              ? \"signup-input-error\" : \"signup-input\"\n            }\n            aria-invalid={errors.password ? \"true\" : \"false\"}\n          />\n          <span className=\"signup-input-placeholder\">\n            New password\n          </span>\n        </div>\n        <div>\n        Use at least 8 characters. Don’t use a password from another site, or something too obvious like your pet’s name. \n        &nbsp;<a>Why?</a>\n        </div>\n        <div className=\"input-container\">\n          <input \n            {...register(\"passwordConfirm\", {\n              required: true,\n              minLength: 8,\n              validate: {\n                emptyString: (value) => emptyStringRegex.test(value) ? false : true, // ' ' //\n                passwordConfirm: (value) => value === watch('password') ? true : false,\n                validPassword: (value) => validPasswordRegex.test(value) ? true : false\n              }\n            })}\n            autoComplete=\"off\"\n            name=\"passwordConfirm\"\n            id=\"passwordConfirm\"\n            type=\"password\"\n            className={errors.password && (\n              errors.passwordConfirm?.type === \"minLength\" ||\n              errors.passwordConfirm?.type === \"required\" ||\n              errors.passwordConfirm?.type !== \"passwordConfirm\")\n              ? \"signup-input-error\" : \"signup-input\"\n            }\n            aria-invalid={errors.passwordConfirm ? \"true\" : \"false\"}\n          />\n          <span className=\"signup-input-placeholder\">\n            Confirm new password\n          </span>\n        </div>\n    </form>\n    <button type=\"submit\">Change password</button>\n    </div>\n    </section>\n\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}