{"ast":null,"code":"var _jsxFileName = \"/home/roqa/Documents/Git/Google/src/pages/MyAccount/Email/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Email() {\n  _s();\n\n  var _errors$email, _errors$email2, _errors$email3, _errors$email4, _errors$email5, _errors$email6, _errors$email7, _errors$email8, _errors$email9;\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      month: '',\n      gender: '',\n      day: '',\n      year: ''\n    },\n    mode: 'onSubmit',\n    reValidateMode: 'onChange',\n    delayError: 1000\n  });\n  const [value, setValue] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    month: '',\n    gender: '',\n    day: '',\n    year: ''\n  });\n\n  const handleChange = e => {\n    setValue({ ...value,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const obj = JSON.parse(localStorage.getItem('user'));\n  const email = obj[0].email;\n  const firstName = obj[0].firstName;\n  const lastName = obj[0].lastName;\n  const letter = firstName.charAt(0).toUpperCase();\n  const URL = \"http://localhost:5000/users?email=\" + email;\n  const validPasswordRegex = /^(?=.*?[A-Z,a-z]).{8,}$/;\n  const validEmailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/; // user@domain.com //\n\n  const noUsernameRegex = /^@\\w+([.-]?\\w+)*$/; // @hello //\n\n  const noUsernameDotRegex = /^@\\w+([.-]?\\w+)*(\\.)$/; // @domain. //\n\n  const onlyCharactersRegex = /^\\w+([.-]?\\w+)*$/; // adsfasdfasdf //\n\n  const noDomainRegex = /^\\w+([.-]?\\w+)*@$/; // user@ //\n\n  const noAtRegex = /^\\w+([.-]?\\w+)*(\\.)+$/; // user. //\n\n  const noAtWithTopDomainRegex = /^\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/; // user.com //\n\n  const emptyStringRegex = /^(?![\\s\\S])/; // '' //\n\n  const noSpaceStartOrEndRegex = /^[^\\s].+[^\\s]$/;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Google Account email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The address used to identify your Google Account to you and others. \\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Learn more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"birthday-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), \"PencilIcon\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Change Google Account email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      noValidate: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\", {\n            required: true,\n            validate: {\n              noUsername: value => noUsernameRegex.test(value) ? false : true,\n              // @domain //\n              noUsernameDot: value => noUsernameDotRegex.test(value) ? false : true,\n              // @domain. //\n              onlyCharacters: value => onlyCharactersRegex.test(value) ? false : true,\n              // abcdefg //\n              validEmail: value => validEmailRegex.test(value) ? true : false,\n              // user@domain.com //\n              noDomain: value => noDomainRegex.test(value) ? false : true,\n              // user@ //\n              noAt: value => noAtRegex.test(value) ? false : true,\n              // user. //\n              noAtWithTopDomain: value => noAtWithTopDomainRegex.test(value) ? false : true,\n              // user.com // \n              emptyString: value => emptyStringRegex.test(value) ? false : true // ' ' //\n\n            }\n          }),\n          autoComplete: \"off\",\n          name: \"email\",\n          type: \"email\",\n          value: value.email,\n          onChange: handleChange,\n          className: ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) !== \"validEmail\" && (((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) !== \"noUsername\" || ((_errors$email3 = errors.email) === null || _errors$email3 === void 0 ? void 0 : _errors$email3.type) !== \"noUsernameDot\" || ((_errors$email4 = errors.email) === null || _errors$email4 === void 0 ? void 0 : _errors$email4.type) !== \"onlyCharacters\" || ((_errors$email5 = errors.email) === null || _errors$email5 === void 0 ? void 0 : _errors$email5.type) !== \"noDomain\" || ((_errors$email6 = errors.email) === null || _errors$email6 === void 0 ? void 0 : _errors$email6.type) !== \"required\" || ((_errors$email7 = errors.email) === null || _errors$email7 === void 0 ? void 0 : _errors$email7.type) !== \"noAt\" || ((_errors$email8 = errors.email) === null || _errors$email8 === void 0 ? void 0 : _errors$email8.type) !== \"emptyString\" || ((_errors$email9 = errors.email) === null || _errors$email9 === void 0 ? void 0 : _errors$email9.type) !== \"noAtWithTopDomain\") ? \"signup-input-error\" : \"signup-input\",\n          \"aria-invalid\": errors.email ? \"true\" : \"false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"signup-input-placeholder\",\n          children: \"New email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/myaccount/email/\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Email, \"MiA0sa11BwcM0PB0RIn172LwUNY=\", false, function () {\n  return [useForm];\n});\n\n_c = Email;\n\nvar _c;\n\n$RefreshReg$(_c, \"Email\");","map":{"version":3,"sources":["/home/roqa/Documents/Git/Google/src/pages/MyAccount/Email/index.jsx"],"names":["Link","useForm","useState","Email","register","handleSubmit","watch","formState","errors","defaultValues","firstName","lastName","email","password","passwordConfirm","month","gender","day","year","mode","reValidateMode","delayError","value","setValue","handleChange","e","target","name","obj","JSON","parse","localStorage","getItem","letter","charAt","toUpperCase","URL","validPasswordRegex","validEmailRegex","noUsernameRegex","noUsernameDotRegex","onlyCharactersRegex","noDomainRegex","noAtRegex","noAtWithTopDomainRegex","emptyStringRegex","noSpaceStartOrEndRegex","required","validate","noUsername","test","noUsernameDot","onlyCharacters","validEmail","noDomain","noAt","noAtWithTopDomain","emptyString","type"],"mappings":"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","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\n\nexport default function Email() {\n  const {register, handleSubmit, watch, formState: { errors }} = useForm({\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      month: '',\n      gender: '',\n      day: '',\n      year: '',\n    },\n    mode: 'onSubmit',\n    reValidateMode: 'onChange',\n    delayError: 1000,\n  });\n\n  const [value, setValue] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    month: '',\n    gender: '',\n    day: '',\n    year: '',\n  })\n\n  const handleChange = (e) => {\n    setValue({\n      ...value,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  const obj = JSON.parse(localStorage.getItem('user'));\n  const email = obj[0].email;\n  const firstName = obj[0].firstName;\n  const lastName = obj[0].lastName;\n  const letter = firstName.charAt(0).toUpperCase();\n  const URL = \"http://localhost:5000/users?email=\" + email;\n\n  const validPasswordRegex =  /^(?=.*?[A-Z,a-z]).{8,}$/;\n  const validEmailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/; // user@domain.com //\n  const noUsernameRegex = /^@\\w+([.-]?\\w+)*$/; // @hello //\n  const noUsernameDotRegex = /^@\\w+([.-]?\\w+)*(\\.)$/; // @domain. //\n  const onlyCharactersRegex = /^\\w+([.-]?\\w+)*$/; // adsfasdfasdf //\n  const noDomainRegex = /^\\w+([.-]?\\w+)*@$/; // user@ //\n  const noAtRegex = /^\\w+([.-]?\\w+)*(\\.)+$/; // user. //\n  const noAtWithTopDomainRegex = /^\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/; // user.com //\n  const emptyStringRegex = /^(?![\\s\\S])/; // '' //\n  const noSpaceStartOrEndRegex = /^[^\\s].+[^\\s]$/;\n\n  return (\n    <>\n    <h1>Google Account email</h1>\n    <p>The address used to identify your Google Account to you and others.\n      &nbsp;<a>Learn more</a>\n    </p>\n\n    <div className=\"birthday-row\">\n      <h3>{email}</h3>\n      PencilIcon\n    </div>\n\n    <h3>Change Google Account email</h3>\n    <form onSubmit={handleSubmit} noValidate>\n    <div className=\"input-container\">\n        <input \n          {...register(\"email\", {\n            required: true,\n            validate: {\n              noUsername: (value) => noUsernameRegex.test(value) ? false : true, // @domain //\n              noUsernameDot: (value) => noUsernameDotRegex.test(value) ? false : true, // @domain. //\n              onlyCharacters: (value) => onlyCharactersRegex.test(value) ? false : true, // abcdefg //\n              validEmail: (value) => validEmailRegex.test(value) ? true : false, // user@domain.com //\n              noDomain: (value) => noDomainRegex.test(value) ? false : true, // user@ //\n              noAt: (value) => noAtRegex.test(value) ? false : true, // user. //\n              noAtWithTopDomain : (value) => noAtWithTopDomainRegex.test(value) ? false : true, // user.com // \n              emptyString: (value) => emptyStringRegex.test(value) ? false : true, // ' ' //\n            }\n          })}\n          autoComplete=\"off\"\n          name=\"email\"\n          type=\"email\"\n          value={value.email}\n          onChange={handleChange}\n          className={errors.email?.type !== \"validEmail\" && (\n            errors.email?.type !== \"noUsername\" ||\n            errors.email?.type !== \"noUsernameDot\" ||\n            errors.email?.type !== \"onlyCharacters\" ||\n            errors.email?.type !== \"noDomain\" ||\n            errors.email?.type !== \"required\" ||\n            errors.email?.type !== \"noAt\" ||\n            errors.email?.type !== \"emptyString\" ||\n            errors.email?.type !== \"noAtWithTopDomain\")\n            ? \"signup-input-error\" : \"signup-input\"\n          }\n          aria-invalid={errors.email ? \"true\" : \"false\"}\n        />\n        <span className=\"signup-input-placeholder\">\n          New email\n        </span>\n      </div>\n       \n    </form>\n    <button>\n        <Link to=\"/myaccount/email/\">\n          Cancel\n        </Link>\n      </button>\n      <button type=\"submit\">Save</button>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}